{"version":3,"sources":["components/List.js","App.js","serviceWorker.js","index.js"],"names":["List","props","list","data","map","item","key","className","aria-hidden","App","useState","JSON","parse","localStorage","getItem","setitem","first","React","createRef","bool","setbool","useEffect","setItem","stringify","id","onClick","hidden","ref","input","type","onKeyPress","ev","value","alert","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAoBeA,MAlBf,SAAcC,GACZ,IAAMC,EAAOD,EAAME,KAAKC,KAAI,SAAAC,GAAI,OAC9B,wBAAIC,IAAKD,EAAME,UAAU,2BACvB,wBAAIA,UAAU,UACZ,0BAAMA,UAAU,kBACd,uBAAGA,UAAU,oBAAoBC,cAAY,UAE/C,0BAAMD,UAAU,UAAUF,QAKhC,OACE,yBAAKE,UAAU,qBACb,wBAAIA,UAAU,eAAeL,K,MC8CpBO,MAzDf,WAAgB,IAAD,EACSC,mBACpBC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,IAFjC,mBACRT,EADQ,KACFU,EADE,KAITC,EAAQC,IAAMC,YAJL,EAKSR,oBAAS,GALlB,mBAKRS,EALQ,KAKFC,EALE,KA4Bb,OAjBAC,qBAAU,WAERR,aAAaS,QAAQ,OAAQX,KAAKY,UAAUlB,OAgB5C,yBAAKmB,GAAG,OAAOjB,UAAU,aACvB,0BAAMA,UAAU,qBACd,wBAAIA,UAAU,kCAAd,QACA,4BAAQA,UAAU,cAAckB,QAzBlB,WAClBL,EAASD,GAAQA,KAwBb,MAIF,yBAAKO,OAAQP,EAAMZ,UAAU,UAC3B,yBAAKA,UAAU,gBACb,0BAAMA,UAAU,8BACd,2BACEoB,IAAK,SAAAC,GACHZ,EAAQY,GAEVC,KAAK,OACLtB,UAAU,QACVuB,WA7BM,SAAAC,GAChB,GAAe,UAAXA,EAAGzB,IAAiB,CACtB,GAAoB,KAAhBU,EAAMgB,MAER,YADAC,MAAM,8BAIRlB,EAAQV,EAAK6B,OAAOlB,EAAMgB,QAC1BhB,EAAMgB,MAAQ,GACdZ,EAASD,GAAO,UAyBhB,yBAAKZ,UAAU,aACb,kBAAC,EAAD,CAAMD,IAAKD,EAAMF,KAAME,OC5CX8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f894b6d8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction List(props) {\r\n  const list = props.data.map(item => (\r\n    <li key={item} className=\"ml-0 mt-4 border-bottom\">\r\n      <h3 className=\"col-12\">\r\n        <span className=\"col-2 border-0\">\r\n          <i className=\"fa fa-circle mr-3\" aria-hidden=\"true\"></i>\r\n        </span>\r\n        <span className=\"col-10\">{item}</span>\r\n      </h3>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"text-light col-12\">\r\n      <ul className=\"col-12 ml-0\">{list}</ul>\r\n    </div>\r\n  );\r\n}\r\nexport default List;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport List from \"./components/List\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nfunction App() {\r\n  var [item, setitem] = useState(\r\n    JSON.parse(localStorage.getItem(\"List\")) || []\r\n  );\r\n  var first = React.createRef();\r\n  var [bool, setbool] = useState(true);\r\n\r\n  const handleClick = () => {\r\n    setbool((bool = !bool));\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    localStorage.setItem(\"List\", JSON.stringify(item));\r\n  });\r\n\r\n  const handlekey = ev => {\r\n    if (ev.key === \"Enter\") {\r\n      if (first.value === \"\") {\r\n        alert(\"Input Field Cant be Empty!\");\r\n        return;\r\n      }\r\n\r\n      setitem(item.concat(first.value));\r\n      first.value = \"\";\r\n      setbool((bool = true));\r\n    }\r\n  };\r\n  return (\r\n    <div id=\"root\" className=\"container\">\r\n      <span className=\"row border-bottom\">\r\n        <h1 className=\"h col-11 bg-yellow pb-0 col-11\">Todo</h1>\r\n        <button className=\"col-1 btn  \" onClick={handleClick}>\r\n          +\r\n        </button>\r\n      </span>\r\n      <div hidden={bool} className=\"row in\">\r\n        <div className=\"card  col-12\">\r\n          <span className=\"card-body bg-yellow col-12\">\r\n            <input\r\n              ref={input => {\r\n                first = input;\r\n              }}\r\n              type=\"text\"\r\n              className=\"col-8\"\r\n              onKeyPress={handlekey}\r\n            ></input>\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mt-5 \">\r\n        <List key={item} data={item} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}