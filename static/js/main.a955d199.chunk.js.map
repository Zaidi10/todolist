{"version":3,"sources":["logo.svg","components/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","props","list","data","map","item","className","aria-hidden","App","useState","setitem","first","React","createRef","id","onClick","document","getElementsByClassName","disabled","ref","input","type","onKeyPress","ev","key","concat","value","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gJAAAA,EAAOC,QAAU,IAA0B,kC,qHCoB5BC,MAlBf,SAAcC,GACZ,IAAMC,EAAOD,EAAME,KAAKC,KAAI,SAAAC,GAAI,OAC9B,wBAAIC,UAAU,kBACZ,wBAAIA,UAAU,UACZ,0BAAMA,UAAU,kBACd,uBAAGA,UAAU,oBAAoBC,cAAY,UAE/C,0BAAMD,UAAU,WAAWD,QAKjC,OACE,yBAAKC,UAAU,qBACb,wBAAIA,UAAU,eAAeJ,K,MC8BpBM,MAzCf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNJ,EADM,KACAK,EADA,KAETC,EAAQC,IAAMC,YAYlB,OACE,yBAAKC,GAAG,OAAOR,UAAU,aACvB,0BAAMA,UAAU,qBACd,wBAAIA,UAAU,sBAAd,cACA,4BAAQA,UAAU,mBAAmBS,QAdvB,WAClBC,SAASC,uBAAuB,MAAMC,UAAW,IAa7C,MAIF,yBAAKZ,UAAU,UACb,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,8BACd,2BACEa,IAAK,SAAAC,GACHT,EAAQS,GAEVC,KAAK,OACLf,UAAU,QACVgB,WAvBM,SAAAC,GACD,UAAXA,EAAGC,MACLd,EAAQL,EAAKoB,OAAOd,EAAMe,QAC1Bf,EAAMe,MAAQ,UAyBd,kBAAC,EAAD,CAAMvB,KAAME,MC7BEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a955d199.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nfunction List(props) {\r\n  const list = props.data.map(item => (\r\n    <li className=\" border-bottom\">\r\n      <h3 className=\"col-12\">\r\n        <span className=\"col-2 noBorder\">\r\n          <i className=\"fa fa-circle mr-3\" aria-hidden=\"true\"></i>\r\n        </span>\r\n        <span className=\"col-10 \">{item}</span>\r\n      </h3>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <div className=\"text-light col-12\">\r\n      <ul className=\"col-12 ml-0\">{list}</ul>\r\n    </div>\r\n  );\r\n}\r\nexport default List;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport List from \"./components/List\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nfunction App() {\n  const [item, setitem] = useState([]);\n  var first = React.createRef();\n\n  const handleClick = () => {\n    document.getElementsByClassName(\"in\").disabled = true;\n  };\n\n  const handlekey = ev => {\n    if (ev.key === \"Enter\") {\n      setitem(item.concat(first.value));\n      first.value = \"\";\n    }\n  };\n  return (\n    <div id=\"root\" className=\"container\">\n      <span className=\"row border-bottom\">\n        <h1 className=\"h bg-yellow col-10\">To Do List</h1>\n        <button className=\"btn btn-warning \" onClick={handleClick}>\n          +\n        </button>\n      </span>\n      <div className=\"row in\">\n        <div className=\"card offset-6 col-6\">\n          <span className=\"card-body bg-yellow col-12\">\n            <input\n              ref={input => {\n                first = input;\n              }}\n              type=\"text\"\n              className=\"col-8\"\n              onKeyPress={handlekey}\n            ></input>\n          </span>\n        </div>\n      </div>\n      <List data={item} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}